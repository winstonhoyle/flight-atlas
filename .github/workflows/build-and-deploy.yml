name: Build and Deploy to AWS and Cloudfare

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: flight-atlas
  ECS_CLUSTER: flights-cluster
  ECS_SERVICE: flight-atlas-service
  ECS_TASK_FAMILY: flights-scraper
  LAMBDA_FUNCTION_NAME: flights-query-lambda

permissions:
  id-token: write
  contents: read

jobs:
  deploy-cloudflare:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        working-directory: app
        run: npm ci

      - name: Build frontend
        working-directory: app
        run: npm run build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: flight-atlas
          directory: ./app/build
        
        ### AWS Setup
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


  deploy-aws:
    runs-on: ubuntu-latest
    name: Deploy Backend (Lambda, ECS, Terraform)
    needs: deploy-cloudflare 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      #### Lambda: build ZIP and update function ####
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies and build ZIP
        id: build-lambda
        run: |
          sh lambda/build.sh
          echo "lambda_zip_path=$(pwd)/lambda/lambda_package.zip" >> $GITHUB_ENV
    
      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://lambda/lambda_package.zip \
            --region $AWS_REGION

      #### Terraform ####
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: infra
        env:
          TF_VAR_cloudflare_zone_io_id: ${{ secrets.CLOUDFLARE_ZONE_IO_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: terraform plan -var "ecs_image=$ecs_image" -var "lambda_zip_path=$lambda_zip_path" -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: infra
        env:
          TF_VAR_cloudflare_zone_io_id: ${{ secrets.CLOUDFLARE_ZONE_IO_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: terraform apply -auto-approve tfplan
