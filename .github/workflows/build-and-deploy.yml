name: Build and Deploy to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ECR_REPOSITORY: flight-atlas
  ECS_CLUSTER: flights-cluster
  ECS_SERVICE: flight-atlas-service
  ECS_TASK_FAMILY: flights-scraper
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "Building Docker image from ecs/Dockerfile..."
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG ecs/
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_FAMILY }} \
            --query taskDefinition > task-def.json

      - name: Update task definition image
        run: |
          NEW_IMAGE=${{ env.IMAGE_URI }}
          jq --arg IMAGE "$NEW_IMAGE" \
             '.containerDefinitions[0].image = $IMAGE' \
             task-def.json > new-task-def.json

      - name: Register new task definition revision
        id: register-task-def
        run: |
          # Remove read-only fields
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
          new-task-def.json > final-task-def.json

          # Register new task definition
          TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://final-task-def.json \
          --query "taskDefinition.taskDefinitionArn" \
          --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      # --- Deploy new task definition to ECS Service ---
      - name: Update ECS service to use new task definition
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEF_ARN }}
