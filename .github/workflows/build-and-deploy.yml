name: Build and Deploy to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ECR_REPOSITORY: flight-atlas
  ECS_CLUSTER: flights-cluster
  ECS_SERVICE: flight-atlas-service
  ECS_TASK_FAMILY: flights-scraper
  LAMBDA_FUNCTION_NAME: flights-query-lambda
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

permissions:
  id-token: write
  contents: read
jobs:
  ecr:
    runs-on: ubuntu-latest
    outputs:
      ecs_image: ${{ steps.build-image.outputs.ECS_IMAGE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        id: build-image
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker build -t $IMAGE_URI ecs/
          docker push $IMAGE_URI
          echo "ECS_IMAGE=$IMAGE_URI" >> $GITHUB_OUTPUT

  lambda:
    runs-on: ubuntu-latest
    needs: ecr
    outputs:
      lambda_zip: ${{ steps.build-lambda.outputs.LAMBDA_ZIP_PATH }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies and build ZIP
        id: build-lambda
        run: |
          sh lambda/build.sh
          echo "LAMBDA_ZIP_PATH=$(pwd)/lambda/lambda_package.zip" >> $GITHUB_OUTPUT

      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --zip-file fileb://lambda/lambda_package.zip \
            --region $AWS_REGION

  terraform:
    runs-on: ubuntu-latest
    needs: [ecr, lambda]
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      TF_WORKSPACE: default
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Format
        working-directory: infra
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan \
          -var "ecs_image=${{ needs.ecr.outputs.ecs_image }}" \
          -var "lambda_zip_path=${{ needs.lambda.outputs.lambda_zip }}" \
          -out=tfplan

      - name: Terraform Apply
        working-directory: infra
        if: github.ref == 'refs/heads/main'
        run: terraform apply -chdir=infra -auto-approve tfplan
